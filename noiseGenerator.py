#This program creates a noise arrayn, changes its format and can save it's seed, save it as an image, display it in pygame.

import pygame
from opensimplex import OpenSimplex
import numpy as np
import random
from PIL import Image

#Function that takes a number from 0 to 255 and returns a greyscale color value with a given transparence
def numberToGreyColor(num, transparence):
    return (num, num, num, transparence)


class OpenSimplexNoise():
    '''Class meant to store a noise array and all the methods related to it'''

    def __init__(self, name, width, height, frequency, seed = None):
        self.name = name
        self.width = width
        self.height = height
        self.freq = frequency
        self.seed = seed

        #If it is not given, generates and stores the seed
        #Used to generate the noise array.
        if self.seed == None:
            self.seed = random.randint(1, 500)

        #Initialises the noise object using the opensimplex library using the seed
        self.originalNoiseObject = OpenSimplex(seed)

        #Array to store the values we will be using
        #We chose numpy  to learn how to use it and because it is
        #apparently a better choice
        self.noiseArray = np.empty([width, height])

    #This method generates the noise array we will use
    def generateNoiseArray(self):
        #y and x are the coordinates of the 2d array
        for y in range(self.height):
            for x in range(self.width):
                
                #This helps with the scale
                nx = 2*x/self.width
                ny = 2*y/self.height

                #Generates the value for each pixel in each iteration
                #The four lines represent the noise value superimposed to make more complex noise
                #Edit this to change the noise's appearance
                self.noiseArray[y][x] = self.originalNoiseObject.noise2d(self.freq*nx, self.freq*ny) + \
                                    0.5 * self.originalNoiseObject.noise2d(2*self.freq*nx, 2*self.freq*ny)+ \
                                    0.25 * self.originalNoiseObject.noise2d(4*self.freq*nx, 4*self.freq*ny)+ \
                                    0.125 * self.originalNoiseObject.noise2d(8*self.freq*nx, 8*self.freq*ny)
        

    #The values generated by generateNoiseArray are values from -1.50 to 1.50 aprox
    #We need the to go from 0 to 255 to use the, as colors
    #This method does that
    #We may try to use the map function instead later
    def mapArbValueToColorValue(self):
        for j in range(len(self.noiseArray)):
            for i in range(len(self.noiseArray[j])):
                num = round(255 / 2 * self.noiseArray[j][i] + 255 / 2)
                if num > 255:
                    num = 255
                if num < 0:
                    num = 0
                self.noiseArray[j][i] = num
                

    #This method displays the noise array as rect objects on a pygame screen
    #It may be better for performance to use an image instead of an array to do that
    def drawInPygame(self, display, x, y, scale):
        for j in range(len(self.noiseArray[0])):
            for i in range(len(self.noiseArray[0][j])):
                pygame.draw.rect(display,(self.noiseArray[0][j][i], self.noiseArray[0][j][i], self.noiseArray[0][j][i]),(x + i * scale , y + j * scale, scale, scale))

    #This method generates a PNG image using the noise array and saves it
    def saveAsPNG(self):
        img = Image.new('RGBA', (self.width, self.height))

        for j in range(len(self.noiseArray)):
            for i in range(len(self.noiseArray[j])):
                img.putpixel( (i,j), numberToGreyColor( int(self.noiseArray[j][i]), 255 ) )

        img.save(str(self.name) + '.png')

    #This method saves the seed in a txt file to use it later
    def saveSeedAsTxtFile(self):
        seedFile = open(str(self.name) + ".txt" , "a")
        seedFile.write(2 * "\n" + str(self.seed))
        seedFile.close()


#Test 
noiseTest = OpenSimplexNoise("noiseTest", 100, 100, 3, 5)
noiseTest.generateNoiseArray()
noiseTest.mapArbValueToColorValue()
noiseTest.saveAsPNG()
noiseTest.saveSeedAsTxtFile()


